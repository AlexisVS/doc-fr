<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 1ef2fdddacc294b73c467162d8430e4590291530 Maintainer: girgias Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.round" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>round</refname>
  <refpurpose>Arrondit un nombre à virgule flottante</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type>float</type><methodname>round</methodname>
    <methodparam><type>float</type><parameter>val</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>precision</parameter><initializer>0</initializer></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>PHP_ROUND_HALF_UP</initializer></methodparam>
   </methodsynopsis>
  <para>
   Retourne la valeur arrondie de <parameter>val</parameter>
   à la précision <parameter>precision</parameter> (nombre de
   chiffres après la virgule). Le paramètre <parameter>precision</parameter>
   peut être négatif ou &null; : c'est sa valeur par défaut.
  </para>
  <!-- It's not true
  <para>
   <caution>
    <simpara>
     When rounding on exact halves <function>round</function> rounds down on
     evens and up on odds.  If you want to always force it in one direction
     on a .5 (or .05 in your case) add or subtract a tiny fuzz factor.  The
     reason behind rounding half the values down and the other half up is to
     avoid the classical banking problem where if you always rounded down
     you would be stealing money from your customers, or if you always
     rounded up you would end up over time losing money.  By averaging it
     out through evens and odds you statistically break even.
    </simpara>
   </caution>
  </para>
  -->
  <para>
   <note>
    <simpara>
     PHP ne gère pas correctement les chaînes telles que 
     <literal>"12 300,2"</literal>, par défaut. Reportez-vous à
     <link linkend="language.types.string.conversion">la conversion de
     chaînes</link>.
    </simpara>
   </note>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>val</parameter></term>
     <listitem>
      <para>
       La valeur à arrondir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>precision</parameter></term>
     <listitem>
      <para>
       Le nombre optionnel de décimales à arrondir.
      </para>
      <para>
       Si la <parameter>precision</parameter> est positive,
       l'arrondi se produit après la virgule.
      </para>
      <para>
       Si la <parameter>precision</parameter> est négative,
       l'arrondi se produit avant la virgule.
       Si la valeur absolue de <parameter>precision</parameter>
       est plus grand ou égal au nombre de chiffres, le résultat
       de l'arrondi est égal à <literal>0</literal>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Utilisez une des constantes suivantes pour spécifier le mode d'arrondi.
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>&Constants;</entry>
           <entry>&Description;</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>PHP_ROUND_HALF_UP</constant></entry>
           <entry>
            Arrondit <parameter>val</parameter> à une <parameter>precision</parameter>
            supérieure de place décimale en s'éloignant de zéro lorsqu'il est à mi-chemin.
            Par exemple, 1.5 deviendra 2 et -1.5 deviendra -2.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_ROUND_HALF_DOWN</constant></entry>
           <entry>
            Arrondit <parameter>val</parameter> à une <parameter>precision</parameter>
            inférieure de place décimale en s'approchant de zéro lorsqu'il est à mi-chemin. 
            Par exemple, 1.5 deviendra 1 et -1.5 deviendra -1.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_ROUND_HALF_EVEN</constant></entry>
           <entry>
            Arrondit <parameter>val</parameter> à la <parameter>precision</parameter>
            de place décimal vers la valeur paire la plus proche.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_ROUND_HALF_ODD</constant></entry>
           <entry>
            Arrondit <parameter>val</parameter> à la <parameter>precision</parameter>
            de place décimal vers la valeur impaire la plus proche.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   La valeur arrondie à la <parameter>precision</parameter> donnée en tant que &float;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>round</function></title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(round(3.4));
var_dump(round(3.5));
var_dump(round(3.6));
var_dump(round(3.6, 0));
var_dump(round(1.95583, 2));
var_dump(round(1241757, -3));
var_dump(round(5.045, 2));
var_dump(round(5.055, 2));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
float(3)
float(4)
float(4)
float(4)
float(1.96)
float(1242000)
float(5.05)
float(5.06)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Comment <parameter>precision</parameter> affecte un flottant</title>
    <programlisting role="php">
<![CDATA[
<?php
$number = 1346.21;

var_dump(round($number, 2));
var_dump(round($number, 1));
var_dump(round($number, 0));
var_dump(round($number, -1));
var_dump(round($number, -2));
var_dump(round($number, -3));
var_dump(round($number, -4));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
float(1346.21)
float(1346.2)
float(1346)
float(1350)
float(1300)
float(1000)
float(0)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple avec <parameter>mode</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
echo 'Mode d'arrondi avec 9.5' . PHP_EOL;
var_dump(round(9.5, 0, PHP_ROUND_HALF_UP));
var_dump(round(9.5, 0, PHP_ROUND_HALF_DOWN));
var_dump(round(9.5, 0, PHP_ROUND_HALF_EVEN));
var_dump(round(9.5, 0, PHP_ROUND_HALF_ODD));

echo 'Mode d'arrondi avec 8.5' . PHP_EOL;
var_dump(round(8.5, 0, PHP_ROUND_HALF_UP));
var_dump(round(8.5, 0, PHP_ROUND_HALF_DOWN));
var_dump(round(8.5, 0, PHP_ROUND_HALF_EVEN));
var_dump(round(8.5, 0, PHP_ROUND_HALF_ODD));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Mode d'arrondi avec 9.5
float(10)
float(9)
float(10)
float(9)
Mode d'arrondi avec 8.5
float(9)
float(8)
float(8)
float(9)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple avec <parameter>mode</parameter> et <parameter>precision</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
echo 'Utilisation de PHP_ROUND_HALF_UP avec une précision d'une décimale' . PHP_EOL;
var_dump(round( 1.55, 1, PHP_ROUND_HALF_UP));
var_dump(round( 1.54, 1, PHP_ROUND_HALF_UP));
var_dump(round(-1.55, 1, PHP_ROUND_HALF_UP));
var_dump(round(-1.54, 1, PHP_ROUND_HALF_UP));

echo PHP_EOL;
echo 'Utilisation de PHP_ROUND_HALF_DOWN avec une précision d'une décimale' . PHP_EOL;
var_dump(round( 1.55, 1, PHP_ROUND_HALF_DOWN));
var_dump(round( 1.54, 1, PHP_ROUND_HALF_DOWN));
var_dump(round(-1.55, 1, PHP_ROUND_HALF_DOWN));
var_dump(round(-1.54, 1, PHP_ROUND_HALF_DOWN));

echo PHP_EOL;
echo 'Utilisation de PHP_ROUND_HALF_EVEN avec une précision d'une décimale' . PHP_EOL;
var_dump(round( 1.55, 1, PHP_ROUND_HALF_EVEN));
var_dump(round( 1.54, 1, PHP_ROUND_HALF_EVEN));
var_dump(round(-1.55, 1, PHP_ROUND_HALF_EVEN));
var_dump(round(-1.54, 1, PHP_ROUND_HALF_EVEN));

echo PHP_EOL;
echo 'Utilisation de PHP_ROUND_HALF_ODD avec une précision d'une décimale' . PHP_EOL;
var_dump(round( 1.55, 1, PHP_ROUND_HALF_ODD));
var_dump(round( 1.54, 1, PHP_ROUND_HALF_ODD));
var_dump(round(-1.55, 1, PHP_ROUND_HALF_ODD));
var_dump(round(-1.54, 1, PHP_ROUND_HALF_ODD));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Utilisation de PHP_ROUND_HALF_UP avec une précision d'une décimale
float(1.6)
float(1.5)
float(-1.6)
float(-1.5)

Utilisation de PHP_ROUND_HALF_DOWN avec une précision d'une décimale
float(1.5)
float(1.5)
float(-1.5)
float(-1.5)

Utilisation de PHP_ROUND_HALF_EVEN avec une précision d'une décimale
float(1.6)
float(1.5)
float(-1.6)
float(-1.5)

Utilisation de PHP_ROUND_HALF_ODD avec une précision d'une décimale
float(1.5)
float(1.5)
float(-1.5)
float(-1.5)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Le paramètre <parameter>mode</parameter> a été ajouté.
       </entry>
      </row>
      <row>
       <entry>5.2.7</entry>
       <entry>
        Le fonctionnement interne de <function>round</function>
        a été modifié afin d'être conforme au standard C99.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ceil</function></member>
    <member><function>floor</function></member>
    <member><function>number_format</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->